{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py_canoe Python \ud83d\udc0d Package for controlling Vector CANoe \ud83d\udef6 Tool fork this repo and create pull request to contribute back to this project. for ideas/discussions please create new discussion here create issue or request feature here GitHub Releases \ud83d\udc49 link PyPi Package \ud83d\udc49 link","title":"about"},{"location":"#py_canoe","text":"Python \ud83d\udc0d Package for controlling Vector CANoe \ud83d\udef6 Tool fork this repo and create pull request to contribute back to this project. for ideas/discussions please create new discussion here create issue or request feature here","title":"py_canoe"},{"location":"#github-releases-link","text":"","title":"GitHub Releases \ud83d\udc49 link"},{"location":"#pypi-package-link","text":"","title":"PyPi Package \ud83d\udc49 link"},{"location":"002_prerequisites/","text":"Prerequisites Python(>=3.9) Vector CANoe software(>=v11) Windows PC(recommended win 10 os) visual studio code","title":"prerequisites"},{"location":"002_prerequisites/#prerequisites","text":"Python(>=3.9) Vector CANoe software(>=v11) Windows PC(recommended win 10 os) visual studio code","title":"Prerequisites"},{"location":"003_environment_setup/","text":"package environment setup and installation create python virtual environment python -m venv .venv activate virtual environment .venv\\Scripts\\activate upgrade pip python -m pip install pip --upgrade Install py_canoe package pip install py_canoe --upgrade","title":"setup"},{"location":"003_environment_setup/#package-environment-setup-and-installation","text":"create python virtual environment python -m venv .venv activate virtual environment .venv\\Scripts\\activate upgrade pip python -m pip install pip --upgrade Install py_canoe package pip install py_canoe --upgrade","title":"package environment setup and installation"},{"location":"004_usage/","text":"Usage Import CANoe module. # Import CANoe module. Always do this in your root script. from py_canoe import CANoe # create CANoe object. arguments are optional. Avoid creating multiple CANoe instances. canoe_inst = CANoe(py_canoe_log_dir=fr'D:\\py_canoe\\py_canoe_log', user_capl_functions=('addition_function', 'hello_world')) Example use cases open CANoe, start measurement, get version info, stop measurement and close canoe configuration canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() canoe_version_info = canoe_inst.get_canoe_version_info() canoe_inst.stop_measurement() canoe_inst.quit() restart/reset running measurement canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() canoe_inst.reset_measurement() canoe_inst.stop_ex_measurement() open CANoe offline config and start/break/step/reset/stop measurement in offline mode canoe_inst.open(fr'D:\\py_canoe\\demo_cfg\\demo_offline.cfg') canoe_inst.add_offline_source_log_file(fr'D:\\py_canoe\\demo_cfg\\Logs\\demo_log.blf') canoe_inst.start_measurement_in_animation_mode(animation_delay=200) wait(1) canoe_inst.break_measurement_in_offline_mode() wait(1) canoe_inst.step_measurement_event_in_single_step() wait(1) canoe_inst.reset_measurement_in_offline_mode() wait(1) canoe_inst.stop_measurement() wait(1) get/set CANoe measurement index canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) meas_index_value = canoe_inst.get_measurement_index() canoe_inst.start_measurement() canoe_inst.stop_measurement() meas_index_value = canoe_inst.get_measurement_index() canoe_inst.set_measurement_index(meas_index_value + 1) meas_index_new = canoe_inst.get_measurement_index() canoe_inst.reset_measurement() canoe_inst.stop_measurement() save CANoe config to a different version with different name canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.save_configuration_as(path=fr'D:\\py_canoe\\demo_cfg\\demo_v10.cfg', major=10, minor=0, create_dir=True) get CAN bus statistics of CAN channel 1 canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(2) canoe_inst.get_can_bus_statistics(channel=1) canoe_inst.stop_measurement() get/set bus signal value, check signal state and get signal full name canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) sig_full_name = canoe_inst.get_signal_full_name(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_value = canoe_inst.get_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', raw_value=False) canoe_inst.set_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', value=1, raw_value=False) wait(1) sig_online_state = canoe_inst.check_signal_online(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_state = canoe_inst.check_signal_state(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_val = canoe_inst.get_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', raw_value=True) canoe_inst.stop_measurement() clear write window / read text from write window / control write window output file canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.enable_write_window_output_file(fr'{file_path}\\demo_cfg\\Logs\\write_win.txt') wait(1) canoe_inst.start_measurement() canoe_inst.clear_write_window_content() wait(1) canoe_inst.write_text_in_write_window(\"hello from py_canoe!\") wait(1) text = canoe_inst.read_text_from_write_window() canoe_inst.stop_measurement() canoe_inst.disable_write_window_output_file() wait(1) switch between CANoe desktops canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.ui_activate_desktop('Configuration') get/set system variable or define system variable canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_system_variable_value('demo::level_two_1::sys_var2', 20) canoe_inst.set_system_variable_value('demo::string_var', 'hey hello this is string variable') canoe_inst.set_system_variable_value('demo::data_var', 'hey hello this is data variable') canoe_inst.set_system_variable_array_values('demo::int_array_var', (00, 11, 22, 33, 44, 55, 66, 77, 88, 99)) wait(0.1) sys_var_val = canoe_inst.get_system_variable_value('demo::level_two_1::sys_var2') sys_var_val = canoe_inst.get_system_variable_value('demo::data_var') canoe_inst.stop_measurement() # define system variable and use it in measurement canoe_inst.define_system_variable('sys_demo::demo', 1) canoe_inst.save_configuration() canoe_inst.start_measurement() wait(1) sys_var_val = canoe_inst.get_system_variable_value('sys_demo::demo') canoe_inst.stop_measurement() send diagnostic request, control tester present canoe_inst.open(fr'D:\\py_canoe\\demo_cfg\\demo_diag.cfg') canoe_inst.start_measurement() wait(1) resp = canoe_inst.send_diag_request('Door', 'DefaultSession_Start', False) canoe_inst.control_tester_present('Door', False) wait(2) canoe_inst.control_tester_present('Door', True) wait(5) resp = canoe_inst.send_diag_request('Door', '10 02') canoe_inst.control_tester_present('Door', False) wait(2) resp = canoe_inst.send_diag_request('Door', '10 03', return_sender_name=True) canoe_inst.stop_measurement() set replay block source file / control replay block start stop canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_replay_block_file(block_name='DemoReplayBlock', recording_file_path=fr'D:\\py_canoe\\demo_cfg\\Logs\\demo_log.blf') wait(1) canoe_inst.control_replay_block(block_name='DemoReplayBlock', start_stop=True) wait(2) canoe_inst.control_replay_block(block_name='DemoReplayBlock', start_stop=False) wait(1) canoe_inst.stop_measurement() compile CAPL nodes and call capl function canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.compile_all_capl_nodes() canoe_inst.start_measurement() wait(1) canoe_inst.call_capl_function('addition_function', 100, 200) canoe_inst.call_capl_function('hello_world') canoe_inst.stop_measurement() execute test setup test module / test environment canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.execute_all_test_modules_in_test_env(demo_test_environment) canoe_inst.execute_test_module('demo_test_node_002') wait(1) canoe_inst.stop_measurement() get/set environment variable value canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_environment_variable_value('int_var', 123.12) canoe_inst.set_environment_variable_value('float_var', 111.123) canoe_inst.set_environment_variable_value('string_var', 'this is string variable') canoe_inst.set_environment_variable_value('data_var', (1, 2, 3, 4, 5, 6, 7)) var_value = canoe_inst.get_environment_variable_value('int_var') var_value = canoe_inst.get_environment_variable_value('float_var') var_value = canoe_inst.get_environment_variable_value('string_var') var_value = canoe_inst.get_environment_variable_value('data_var') wait(1) canoe_inst.stop_measurement()","title":"usage"},{"location":"004_usage/#usage","text":"","title":"Usage"},{"location":"004_usage/#import-canoe-module","text":"# Import CANoe module. Always do this in your root script. from py_canoe import CANoe # create CANoe object. arguments are optional. Avoid creating multiple CANoe instances. canoe_inst = CANoe(py_canoe_log_dir=fr'D:\\py_canoe\\py_canoe_log', user_capl_functions=('addition_function', 'hello_world'))","title":"Import CANoe module."},{"location":"004_usage/#example-use-cases","text":"","title":"Example use cases"},{"location":"004_usage/#open-canoe-start-measurement-get-version-info-stop-measurement-and-close-canoe-configuration","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() canoe_version_info = canoe_inst.get_canoe_version_info() canoe_inst.stop_measurement() canoe_inst.quit()","title":"open CANoe, start measurement, get version info, stop measurement and close canoe configuration"},{"location":"004_usage/#restartreset-running-measurement","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() canoe_inst.reset_measurement() canoe_inst.stop_ex_measurement()","title":"restart/reset running measurement"},{"location":"004_usage/#open-canoe-offline-config-and-startbreakstepresetstop-measurement-in-offline-mode","text":"canoe_inst.open(fr'D:\\py_canoe\\demo_cfg\\demo_offline.cfg') canoe_inst.add_offline_source_log_file(fr'D:\\py_canoe\\demo_cfg\\Logs\\demo_log.blf') canoe_inst.start_measurement_in_animation_mode(animation_delay=200) wait(1) canoe_inst.break_measurement_in_offline_mode() wait(1) canoe_inst.step_measurement_event_in_single_step() wait(1) canoe_inst.reset_measurement_in_offline_mode() wait(1) canoe_inst.stop_measurement() wait(1)","title":"open CANoe offline config and start/break/step/reset/stop measurement in offline mode"},{"location":"004_usage/#getset-canoe-measurement-index","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) meas_index_value = canoe_inst.get_measurement_index() canoe_inst.start_measurement() canoe_inst.stop_measurement() meas_index_value = canoe_inst.get_measurement_index() canoe_inst.set_measurement_index(meas_index_value + 1) meas_index_new = canoe_inst.get_measurement_index() canoe_inst.reset_measurement() canoe_inst.stop_measurement()","title":"get/set CANoe measurement index"},{"location":"004_usage/#save-canoe-config-to-a-different-version-with-different-name","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.save_configuration_as(path=fr'D:\\py_canoe\\demo_cfg\\demo_v10.cfg', major=10, minor=0, create_dir=True)","title":"save CANoe config to a different version with different name"},{"location":"004_usage/#get-can-bus-statistics-of-can-channel-1","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(2) canoe_inst.get_can_bus_statistics(channel=1) canoe_inst.stop_measurement()","title":"get CAN bus statistics of CAN channel 1"},{"location":"004_usage/#getset-bus-signal-value-check-signal-state-and-get-signal-full-name","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) sig_full_name = canoe_inst.get_signal_full_name(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_value = canoe_inst.get_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', raw_value=False) canoe_inst.set_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', value=1, raw_value=False) wait(1) sig_online_state = canoe_inst.check_signal_online(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_state = canoe_inst.check_signal_state(bus='CAN', channel=1, message='LightState', signal='FlashLight') sig_val = canoe_inst.get_signal_value(bus='CAN', channel=1, message='LightState', signal='FlashLight', raw_value=True) canoe_inst.stop_measurement()","title":"get/set bus signal value, check signal state and get signal full name"},{"location":"004_usage/#clear-write-window-read-text-from-write-window-control-write-window-output-file","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.enable_write_window_output_file(fr'{file_path}\\demo_cfg\\Logs\\write_win.txt') wait(1) canoe_inst.start_measurement() canoe_inst.clear_write_window_content() wait(1) canoe_inst.write_text_in_write_window(\"hello from py_canoe!\") wait(1) text = canoe_inst.read_text_from_write_window() canoe_inst.stop_measurement() canoe_inst.disable_write_window_output_file() wait(1)","title":"clear write window / read text from write window / control write window output file"},{"location":"004_usage/#switch-between-canoe-desktops","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.ui_activate_desktop('Configuration')","title":"switch between CANoe desktops"},{"location":"004_usage/#getset-system-variable-or-define-system-variable","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_system_variable_value('demo::level_two_1::sys_var2', 20) canoe_inst.set_system_variable_value('demo::string_var', 'hey hello this is string variable') canoe_inst.set_system_variable_value('demo::data_var', 'hey hello this is data variable') canoe_inst.set_system_variable_array_values('demo::int_array_var', (00, 11, 22, 33, 44, 55, 66, 77, 88, 99)) wait(0.1) sys_var_val = canoe_inst.get_system_variable_value('demo::level_two_1::sys_var2') sys_var_val = canoe_inst.get_system_variable_value('demo::data_var') canoe_inst.stop_measurement() # define system variable and use it in measurement canoe_inst.define_system_variable('sys_demo::demo', 1) canoe_inst.save_configuration() canoe_inst.start_measurement() wait(1) sys_var_val = canoe_inst.get_system_variable_value('sys_demo::demo') canoe_inst.stop_measurement()","title":"get/set system variable or define system variable"},{"location":"004_usage/#send-diagnostic-request-control-tester-present","text":"canoe_inst.open(fr'D:\\py_canoe\\demo_cfg\\demo_diag.cfg') canoe_inst.start_measurement() wait(1) resp = canoe_inst.send_diag_request('Door', 'DefaultSession_Start', False) canoe_inst.control_tester_present('Door', False) wait(2) canoe_inst.control_tester_present('Door', True) wait(5) resp = canoe_inst.send_diag_request('Door', '10 02') canoe_inst.control_tester_present('Door', False) wait(2) resp = canoe_inst.send_diag_request('Door', '10 03', return_sender_name=True) canoe_inst.stop_measurement()","title":"send diagnostic request, control tester present"},{"location":"004_usage/#set-replay-block-source-file-control-replay-block-start-stop","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_replay_block_file(block_name='DemoReplayBlock', recording_file_path=fr'D:\\py_canoe\\demo_cfg\\Logs\\demo_log.blf') wait(1) canoe_inst.control_replay_block(block_name='DemoReplayBlock', start_stop=True) wait(2) canoe_inst.control_replay_block(block_name='DemoReplayBlock', start_stop=False) wait(1) canoe_inst.stop_measurement()","title":"set replay block source file / control replay block start stop"},{"location":"004_usage/#compile-capl-nodes-and-call-capl-function","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.compile_all_capl_nodes() canoe_inst.start_measurement() wait(1) canoe_inst.call_capl_function('addition_function', 100, 200) canoe_inst.call_capl_function('hello_world') canoe_inst.stop_measurement()","title":"compile CAPL nodes and call capl function"},{"location":"004_usage/#execute-test-setup-test-module-test-environment","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.execute_all_test_modules_in_test_env(demo_test_environment) canoe_inst.execute_test_module('demo_test_node_002') wait(1) canoe_inst.stop_measurement()","title":"execute test setup test module / test environment"},{"location":"004_usage/#getset-environment-variable-value","text":"canoe_inst.open(canoe_cfg=fr'D:\\py_canoe\\demo_cfg\\demo_dev.cfg', visible=True, auto_save=False, prompt_user=False) canoe_inst.start_measurement() wait(1) canoe_inst.set_environment_variable_value('int_var', 123.12) canoe_inst.set_environment_variable_value('float_var', 111.123) canoe_inst.set_environment_variable_value('string_var', 'this is string variable') canoe_inst.set_environment_variable_value('data_var', (1, 2, 3, 4, 5, 6, 7)) var_value = canoe_inst.get_environment_variable_value('int_var') var_value = canoe_inst.get_environment_variable_value('float_var') var_value = canoe_inst.get_environment_variable_value('string_var') var_value = canoe_inst.get_environment_variable_value('data_var') wait(1) canoe_inst.stop_measurement()","title":"get/set environment variable value"},{"location":"999_reference/","text":"reference Python package for controlling Vector CANoe tool CANoe(py_canoe_log_dir='', user_capl_functions=tuple()) The CANoe class represents the CANoe application. The CANoe class is the foundation for the object hierarchy. You can reach all other methods from the CANoe class instance. Examples: >>> # Example to open CANoe configuration, start measurement, stop measurement and close configuration. >>> canoe_inst = CANoe(py_canoe_log_dir=r'D:\\.py_canoe') >>> canoe_inst.open(r'D:\\py_canoe\\demo_cfg\\demo.cfg') >>> canoe_inst.start_measurement() >>> wait(10) >>> canoe_inst.stop_measurement() >>> canoe_inst.quit() Parameters: py_canoe_log_dir ( str , default: '' ) \u2013 directory to store py_canoe log. example 'D:.py_canoe' user_capl_functions ( tuple , default: tuple () ) \u2013 user defined CAPL functions to access. on measurement init these functions will be initialized. add_offline_source_log_file(absolute_log_file_path) this method adds offline source log file. Parameters: absolute_log_file_path ( str ) \u2013 absolute path of offline source log file. Returns: bool ( bool ) \u2013 returns True if log file added or already available. False if log file not available. break_measurement_in_offline_mode() Interrupts the playback in Offline mode. call_capl_function(name, *arguments) Calls a CAPL function. Please note that the number of parameters must agree with that of the CAPL function. not possible to read return value of CAPL function at the moment. only execution status is returned. Parameters: name ( str ) \u2013 The name of the CAPL function. Please make sure this name is already passed as argument during CANoe instance creation. see example for more info. arguments ( tuple , default: () ) \u2013 Function parameters p1\u2026p10 (optional). Returns: bool ( bool ) \u2013 CAPL function execution status. True-success, False-failed. check_j1939_signal_online(bus, channel, message, signal, source_addr, dest_addr) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: bool ( bool ) \u2013 TRUE: if the measurement is running and the signal has been received. FALSE: if not. check_j1939_signal_state(bus, channel, message, signal, source_addr, dest_addr) Returns the state of the signal. Returns: int ( int ) \u2013 State of the signal. possible values are: 0: The default value of the signal is returned. 1: The measurement is not running; the value set by the application is returned. 3: The signal has been received in the current measurement; the current value is returned. check_signal_online(bus, channel, message, signal) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: bool \u2013 TRUE if the measurement is running and the signal has been received. FALSE if not. check_signal_state(bus, channel, message, signal) Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: int \u2013 State of the signal. 0- The default value of the signal is returned. 1- The measurement is not running; the value set by the application is returned. 2- The measurement is not running; the value of the last measurement is returned. 3- The signal has been received in the current measurement; the current value is returned. clear_write_window_content() Clears the contents of the Write Window. compile_all_capl_nodes() compiles all CAPL, XML and .NET nodes. control_replay_block(block_name, start_stop) Method for setting CANoe replay block file. Parameters: block_name ( str ) \u2013 CANoe replay block name start_stop ( bool ) \u2013 True to start replay block. False to Stop. control_tester_present(diag_ecu_qualifier_name, value) Starts/Stops sending autonomous/cyclical Tester Present requests to the ECU. Parameters: diag_ecu_qualifier_name ( str ) \u2013 Diagnostic Node ECU Qualifier Name configured in \"Diagnostic/ISO TP Configuration\". value ( bool ) \u2013 True - activate tester present. False - deactivate tester present. copy_write_window_content() Copies the contents of the Write Window to the clipboard. define_system_variable(sys_var_name, value) define_system_variable Create a system variable with an initial value Args: sys_var_name (str): The name of the system variable. Ex- \"sys_var_demo::speed\" value (Union[int, float, str]): variable value. Default value 0. Returns: object ( object ) \u2013 The new Variable object. disable_write_window_output_file(tab_index=None) Disables logging of all outputs of the Write Window. Parameters: tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None. enable_write_window_output_file(output_file, tab_index=None) Enables logging of all outputs of the Write Window in the output file. Parameters: output_file ( str ) \u2013 The complete path of the output file. tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None. execute_all_test_environments() executes all test environments available in test setup. execute_all_test_modules_in_test_env(env_name) executes all test modules available in test environment. Parameters: env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration. execute_test_module(test_module_name) use this method to execute test module. Parameters: test_module_name ( str ) \u2013 test module name. avoid duplicate test module names in CANoe configuration. Returns: int ( int ) \u2013 test module execution verdict. 0 ='VerdictNotAvailable', 1 = 'VerdictPassed', 2 = 'VerdictFailed', get_bus_databases_info(bus) returns bus database info(path, channel, full_name). Parameters: bus ( str ) \u2013 bus (str): The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. Returns: dict \u2013 bus database info {'path': 'value', 'channel': 'value', 'full_name': 'value'} get_bus_nodes_info(bus) returns bus nodes info(path, full_name, active). Parameters: bus ( str ) \u2013 bus (str): The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. Returns: dict \u2013 bus nodes info {'path': 'value', 'full_name': 'value', 'active': 'value'} get_can_bus_statistics(channel) Returns CAN Bus Statistics. Parameters: channel ( int ) \u2013 The channel of the statistic that is to be returned. Returns: dict \u2013 CAN bus statistics. get_canoe_version_info() The Version class represents the version of the CANoe application. Returns: dict \u2013 \"full_name\" - The complete CANoe version. dict \u2013 \"name\" - The CANoe version. dict \u2013 \"build\" - The build number of the CANoe application. dict \u2013 \"major\" - The major version number of the CANoe application. dict \u2013 \"minor\" - The minor version number of the CANoe application. dict \u2013 \"patch\" - The patch number of the CANoe application. get_environment_variable_value(env_var_name) returns a environment variable value. Parameters: env_var_name ( str ) \u2013 The name of the environment variable. Ex- \"float_var\" Returns: Union [ int , float , str , tuple , None] \u2013 Environment Variable value. get_j1939_signal_full_name(bus, channel, message, signal, source_addr, dest_addr) Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: :: get_j1939_signal_value(bus, channel, message, signal, source_addr, dest_addr, raw_value=False) get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value. get_measurement_index() gets the measurement index for the next measurement. Returns: int \u2013 Measurement Index. get_measurement_running_status() Returns the running state of the measurement. Returns: bool \u2013 True if The measurement is running. bool \u2013 False if The measurement is not running. get_signal_full_name(bus, channel, message, signal) Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: :: get_signal_value(bus, channel, message, signal, raw_value=False) get_signal_value Returns a Signal value. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value. get_system_variable_value(sys_var_name) get_system_variable_value Returns a system variable value. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" Returns: Union [ int , float , str , tuple , None] \u2013 System Variable value. get_test_environments() returns dictionary of test environment names and class. get_test_modules(test_env_name) returns dictionary of test module names and class. Parameters: test_env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration. new(auto_save=False, prompt_user=False) Creates a new configuration. Parameters: auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False. open(canoe_cfg, visible=True, auto_save=False, prompt_user=False) Loads CANoe configuration. Parameters: canoe_cfg ( str ) \u2013 The complete path for the CANoe configuration. visible ( bool , default: True ) \u2013 True if you want to see CANoe UI. Defaults to True. auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False. quit() Quits CANoe without saving changes in the configuration. read_text_from_write_window() read the text contents from Write Window. Returns: str \u2013 The text content. reset_measurement() reset the measurement. Returns: bool \u2013 Measurement running status(True/False). reset_measurement_in_offline_mode() Resets the measurement in Offline mode. save_configuration() Saves the configuration. Returns: bool \u2013 True if configuration saved. else False. save_configuration_as(path, major, minor, create_dir=True) Saves the configuration as a different CANoe version. Parameters: path ( str ) \u2013 The complete file name. major ( int ) \u2013 The major version number of the target version. minor ( int ) \u2013 The minor version number of the target version. create_dir ( bool , default: True ) \u2013 create directory if not available. default value True. Returns: bool \u2013 True if configuration saved. else False. send_diag_request(diag_ecu_qualifier_name, request, request_in_bytes=True, return_sender_name=False) The send_diag_request method represents the query of a diagnostic tester (client) to an ECU (server) in CANoe. Parameters: diag_ecu_qualifier_name ( str ) \u2013 Diagnostic Node ECU Qualifier Name configured in \"Diagnostic/ISO TP Configuration\". request ( str ) \u2013 Diagnostic request in bytes or diagnostic request qualifier name. request_in_bytes ( bool , default: True ) \u2013 True if Diagnostic request is bytes. False if you are using Qualifier name. Default is True. return_sender_name ( bool , default: False ) \u2013 True if you user want response along with response sender name in dictionary. Default is False. Returns: Union [ str , dict ] \u2013 diagnostic response stream. Ex- \"50 01 00 00 00 00\" or {'Door': \"50 01 00 00 00 00\"} set_environment_variable_value(env_var_name, value) sets a value to environment variable. Parameters: env_var_name ( str ) \u2013 The name of the environment variable. Ex- \"speed\". value ( Union [ int , float , str , tuple ] ) \u2013 variable value. supported CAPL environment variable data types integer, double, string and data. set_j1939_signal_value(bus, channel, message, signal, source_addr, dest_addr, value, raw_value=False) get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. value ( Union [ float , int ] ) \u2013 signal value. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: None \u2013 signal value. set_measurement_index(index) sets the measurement index for the next measurement. Parameters: index ( int ) \u2013 index value to set. Returns: int \u2013 Measurement Index value. set_replay_block_file(block_name, recording_file_path) Method for setting CANoe replay block file. Parameters: block_name ( str ) \u2013 CANoe replay block name recording_file_path ( str ) \u2013 CANoe replay recording file including path. set_signal_value(bus, channel, message, signal, value, raw_value=False) set_signal_value sets a value to Signal. Works only when messages are sent using CANoe IL. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. value ( Union [ float , int ] ) \u2013 signal value. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. set_system_variable_array_values(sys_var_name, value, index=0) set_system_variable_array_values sets array of values to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" value ( tuple ) \u2013 variable values. supported integer array or double array. please always give only one type. index ( int , default: 0 ) \u2013 value of index where values will start updating. Defaults to 0. set_system_variable_value(sys_var_name, value) set_system_variable_value sets a value to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\". value ( Union [ int , float , str ] ) \u2013 variable value. supported CAPL system variable data types integer, double, string and data. start_measurement(timeout=60) Starts the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement started. else False. start_measurement_in_animation_mode(animation_delay=100) Starts the measurement in Animation mode. Parameters: animation_delay ( int , default: 100 ) \u2013 The animation delay during the measurement in Offline Mode. step_measurement_event_in_single_step() Processes a measurement event in single step. stop_all_test_environments() stops execution of all test environments available in test setup. stop_all_test_modules_in_test_env(env_name) stops execution of all test modules available in test environment. Parameters: env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration. stop_ex_measurement(timeout=60) StopEx repairs differences in the behavior of the Stop method on deferred stops concerning simulated and real mode in CANoe. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False. stop_measurement(timeout=60) Stops the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False. stop_test_module(env_name, module_name) stops execution of test module. Parameters: module_name ( str ) \u2013 test module name. avoid duplicate test module names in CANoe configuration. ui_activate_desktop(name) Activates the desktop with the given name. Parameters: name ( str ) \u2013 The name of the desktop to be activated. ui_open_baudrate_dialog() opens the dialog for configuring the bus parameters. Make sure Measurement stopped when using this method. write_text_in_write_window(text) Outputs a line of text in the Write Window. Args: text (str): The text.","title":"reference"},{"location":"999_reference/#reference","text":"Python package for controlling Vector CANoe tool","title":"reference"},{"location":"999_reference/#src.py_canoe.CANoe","text":"The CANoe class represents the CANoe application. The CANoe class is the foundation for the object hierarchy. You can reach all other methods from the CANoe class instance. Examples: >>> # Example to open CANoe configuration, start measurement, stop measurement and close configuration. >>> canoe_inst = CANoe(py_canoe_log_dir=r'D:\\.py_canoe') >>> canoe_inst.open(r'D:\\py_canoe\\demo_cfg\\demo.cfg') >>> canoe_inst.start_measurement() >>> wait(10) >>> canoe_inst.stop_measurement() >>> canoe_inst.quit() Parameters: py_canoe_log_dir ( str , default: '' ) \u2013 directory to store py_canoe log. example 'D:.py_canoe' user_capl_functions ( tuple , default: tuple () ) \u2013 user defined CAPL functions to access. on measurement init these functions will be initialized.","title":"CANoe"},{"location":"999_reference/#src.py_canoe.CANoe.add_offline_source_log_file","text":"this method adds offline source log file. Parameters: absolute_log_file_path ( str ) \u2013 absolute path of offline source log file. Returns: bool ( bool ) \u2013 returns True if log file added or already available. False if log file not available.","title":"add_offline_source_log_file()"},{"location":"999_reference/#src.py_canoe.CANoe.break_measurement_in_offline_mode","text":"Interrupts the playback in Offline mode.","title":"break_measurement_in_offline_mode()"},{"location":"999_reference/#src.py_canoe.CANoe.call_capl_function","text":"Calls a CAPL function. Please note that the number of parameters must agree with that of the CAPL function. not possible to read return value of CAPL function at the moment. only execution status is returned. Parameters: name ( str ) \u2013 The name of the CAPL function. Please make sure this name is already passed as argument during CANoe instance creation. see example for more info. arguments ( tuple , default: () ) \u2013 Function parameters p1\u2026p10 (optional). Returns: bool ( bool ) \u2013 CAPL function execution status. True-success, False-failed.","title":"call_capl_function()"},{"location":"999_reference/#src.py_canoe.CANoe.check_j1939_signal_online","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: bool ( bool ) \u2013 TRUE: if the measurement is running and the signal has been received. FALSE: if not.","title":"check_j1939_signal_online()"},{"location":"999_reference/#src.py_canoe.CANoe.check_j1939_signal_state","text":"Returns the state of the signal. Returns: int ( int ) \u2013 State of the signal. possible values are: 0: The default value of the signal is returned. 1: The measurement is not running; the value set by the application is returned. 3: The signal has been received in the current measurement; the current value is returned.","title":"check_j1939_signal_state()"},{"location":"999_reference/#src.py_canoe.CANoe.check_signal_online","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: bool \u2013 TRUE if the measurement is running and the signal has been received. FALSE if not.","title":"check_signal_online()"},{"location":"999_reference/#src.py_canoe.CANoe.check_signal_state","text":"Checks whether the measurement is running and the signal has been received. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: int \u2013 State of the signal. 0- The default value of the signal is returned. 1- The measurement is not running; the value set by the application is returned. 2- The measurement is not running; the value of the last measurement is returned. 3- The signal has been received in the current measurement; the current value is returned.","title":"check_signal_state()"},{"location":"999_reference/#src.py_canoe.CANoe.clear_write_window_content","text":"Clears the contents of the Write Window.","title":"clear_write_window_content()"},{"location":"999_reference/#src.py_canoe.CANoe.compile_all_capl_nodes","text":"compiles all CAPL, XML and .NET nodes.","title":"compile_all_capl_nodes()"},{"location":"999_reference/#src.py_canoe.CANoe.control_replay_block","text":"Method for setting CANoe replay block file. Parameters: block_name ( str ) \u2013 CANoe replay block name start_stop ( bool ) \u2013 True to start replay block. False to Stop.","title":"control_replay_block()"},{"location":"999_reference/#src.py_canoe.CANoe.control_tester_present","text":"Starts/Stops sending autonomous/cyclical Tester Present requests to the ECU. Parameters: diag_ecu_qualifier_name ( str ) \u2013 Diagnostic Node ECU Qualifier Name configured in \"Diagnostic/ISO TP Configuration\". value ( bool ) \u2013 True - activate tester present. False - deactivate tester present.","title":"control_tester_present()"},{"location":"999_reference/#src.py_canoe.CANoe.copy_write_window_content","text":"Copies the contents of the Write Window to the clipboard.","title":"copy_write_window_content()"},{"location":"999_reference/#src.py_canoe.CANoe.define_system_variable","text":"define_system_variable Create a system variable with an initial value Args: sys_var_name (str): The name of the system variable. Ex- \"sys_var_demo::speed\" value (Union[int, float, str]): variable value. Default value 0. Returns: object ( object ) \u2013 The new Variable object.","title":"define_system_variable()"},{"location":"999_reference/#src.py_canoe.CANoe.disable_write_window_output_file","text":"Disables logging of all outputs of the Write Window. Parameters: tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None.","title":"disable_write_window_output_file()"},{"location":"999_reference/#src.py_canoe.CANoe.enable_write_window_output_file","text":"Enables logging of all outputs of the Write Window in the output file. Parameters: output_file ( str ) \u2013 The complete path of the output file. tab_index ( int , default: None ) \u2013 The index of the page, for which logging of the output is to be activated. Defaults to None.","title":"enable_write_window_output_file()"},{"location":"999_reference/#src.py_canoe.CANoe.execute_all_test_environments","text":"executes all test environments available in test setup.","title":"execute_all_test_environments()"},{"location":"999_reference/#src.py_canoe.CANoe.execute_all_test_modules_in_test_env","text":"executes all test modules available in test environment. Parameters: env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration.","title":"execute_all_test_modules_in_test_env()"},{"location":"999_reference/#src.py_canoe.CANoe.execute_test_module","text":"use this method to execute test module. Parameters: test_module_name ( str ) \u2013 test module name. avoid duplicate test module names in CANoe configuration. Returns: int ( int ) \u2013 test module execution verdict. 0 ='VerdictNotAvailable', 1 = 'VerdictPassed', 2 = 'VerdictFailed',","title":"execute_test_module()"},{"location":"999_reference/#src.py_canoe.CANoe.get_bus_databases_info","text":"returns bus database info(path, channel, full_name). Parameters: bus ( str ) \u2013 bus (str): The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. Returns: dict \u2013 bus database info {'path': 'value', 'channel': 'value', 'full_name': 'value'}","title":"get_bus_databases_info()"},{"location":"999_reference/#src.py_canoe.CANoe.get_bus_nodes_info","text":"returns bus nodes info(path, full_name, active). Parameters: bus ( str ) \u2013 bus (str): The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. Returns: dict \u2013 bus nodes info {'path': 'value', 'full_name': 'value', 'active': 'value'}","title":"get_bus_nodes_info()"},{"location":"999_reference/#src.py_canoe.CANoe.get_can_bus_statistics","text":"Returns CAN Bus Statistics. Parameters: channel ( int ) \u2013 The channel of the statistic that is to be returned. Returns: dict \u2013 CAN bus statistics.","title":"get_can_bus_statistics()"},{"location":"999_reference/#src.py_canoe.CANoe.get_canoe_version_info","text":"The Version class represents the version of the CANoe application. Returns: dict \u2013 \"full_name\" - The complete CANoe version. dict \u2013 \"name\" - The CANoe version. dict \u2013 \"build\" - The build number of the CANoe application. dict \u2013 \"major\" - The major version number of the CANoe application. dict \u2013 \"minor\" - The minor version number of the CANoe application. dict \u2013 \"patch\" - The patch number of the CANoe application.","title":"get_canoe_version_info()"},{"location":"999_reference/#src.py_canoe.CANoe.get_environment_variable_value","text":"returns a environment variable value. Parameters: env_var_name ( str ) \u2013 The name of the environment variable. Ex- \"float_var\" Returns: Union [ int , float , str , tuple , None] \u2013 Environment Variable value.","title":"get_environment_variable_value()"},{"location":"999_reference/#src.py_canoe.CANoe.get_j1939_signal_full_name","text":"Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: ::","title":"get_j1939_signal_full_name()"},{"location":"999_reference/#src.py_canoe.CANoe.get_j1939_signal_value","text":"get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value.","title":"get_j1939_signal_value()"},{"location":"999_reference/#src.py_canoe.CANoe.get_measurement_index","text":"gets the measurement index for the next measurement. Returns: int \u2013 Measurement Index.","title":"get_measurement_index()"},{"location":"999_reference/#src.py_canoe.CANoe.get_measurement_running_status","text":"Returns the running state of the measurement. Returns: bool \u2013 True if The measurement is running. bool \u2013 False if The measurement is not running.","title":"get_measurement_running_status()"},{"location":"999_reference/#src.py_canoe.CANoe.get_signal_full_name","text":"Determines the fully qualified name of a signal. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. Returns: str ( str ) \u2013 The fully qualified name of a signal. The following format will be used for signals: :: ::","title":"get_signal_full_name()"},{"location":"999_reference/#src.py_canoe.CANoe.get_signal_value","text":"get_signal_value Returns a Signal value. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: Union [ float , int ] \u2013 signal value.","title":"get_signal_value()"},{"location":"999_reference/#src.py_canoe.CANoe.get_system_variable_value","text":"get_system_variable_value Returns a system variable value. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" Returns: Union [ int , float , str , tuple , None] \u2013 System Variable value.","title":"get_system_variable_value()"},{"location":"999_reference/#src.py_canoe.CANoe.get_test_environments","text":"returns dictionary of test environment names and class.","title":"get_test_environments()"},{"location":"999_reference/#src.py_canoe.CANoe.get_test_modules","text":"returns dictionary of test module names and class. Parameters: test_env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration.","title":"get_test_modules()"},{"location":"999_reference/#src.py_canoe.CANoe.new","text":"Creates a new configuration. Parameters: auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False.","title":"new()"},{"location":"999_reference/#src.py_canoe.CANoe.open","text":"Loads CANoe configuration. Parameters: canoe_cfg ( str ) \u2013 The complete path for the CANoe configuration. visible ( bool , default: True ) \u2013 True if you want to see CANoe UI. Defaults to True. auto_save ( bool , default: False ) \u2013 A boolean value that indicates whether the active configuration should be saved if it has been changed. Defaults to False. prompt_user ( bool , default: False ) \u2013 A boolean value that indicates whether the user should intervene in error situations. Defaults to False.","title":"open()"},{"location":"999_reference/#src.py_canoe.CANoe.quit","text":"Quits CANoe without saving changes in the configuration.","title":"quit()"},{"location":"999_reference/#src.py_canoe.CANoe.read_text_from_write_window","text":"read the text contents from Write Window. Returns: str \u2013 The text content.","title":"read_text_from_write_window()"},{"location":"999_reference/#src.py_canoe.CANoe.reset_measurement","text":"reset the measurement. Returns: bool \u2013 Measurement running status(True/False).","title":"reset_measurement()"},{"location":"999_reference/#src.py_canoe.CANoe.reset_measurement_in_offline_mode","text":"Resets the measurement in Offline mode.","title":"reset_measurement_in_offline_mode()"},{"location":"999_reference/#src.py_canoe.CANoe.save_configuration","text":"Saves the configuration. Returns: bool \u2013 True if configuration saved. else False.","title":"save_configuration()"},{"location":"999_reference/#src.py_canoe.CANoe.save_configuration_as","text":"Saves the configuration as a different CANoe version. Parameters: path ( str ) \u2013 The complete file name. major ( int ) \u2013 The major version number of the target version. minor ( int ) \u2013 The minor version number of the target version. create_dir ( bool , default: True ) \u2013 create directory if not available. default value True. Returns: bool \u2013 True if configuration saved. else False.","title":"save_configuration_as()"},{"location":"999_reference/#src.py_canoe.CANoe.send_diag_request","text":"The send_diag_request method represents the query of a diagnostic tester (client) to an ECU (server) in CANoe. Parameters: diag_ecu_qualifier_name ( str ) \u2013 Diagnostic Node ECU Qualifier Name configured in \"Diagnostic/ISO TP Configuration\". request ( str ) \u2013 Diagnostic request in bytes or diagnostic request qualifier name. request_in_bytes ( bool , default: True ) \u2013 True if Diagnostic request is bytes. False if you are using Qualifier name. Default is True. return_sender_name ( bool , default: False ) \u2013 True if you user want response along with response sender name in dictionary. Default is False. Returns: Union [ str , dict ] \u2013 diagnostic response stream. Ex- \"50 01 00 00 00 00\" or {'Door': \"50 01 00 00 00 00\"}","title":"send_diag_request()"},{"location":"999_reference/#src.py_canoe.CANoe.set_environment_variable_value","text":"sets a value to environment variable. Parameters: env_var_name ( str ) \u2013 The name of the environment variable. Ex- \"speed\". value ( Union [ int , float , str , tuple ] ) \u2013 variable value. supported CAPL environment variable data types integer, double, string and data.","title":"set_environment_variable_value()"},{"location":"999_reference/#src.py_canoe.CANoe.set_j1939_signal_value","text":"get_j1939_signal Returns a Signal object. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. source_addr ( int ) \u2013 The source address of the ECU that sends the message. dest_addr ( int ) \u2013 The destination address of the ECU that receives the message. value ( Union [ float , int ] ) \u2013 signal value. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value. Returns: None \u2013 signal value.","title":"set_j1939_signal_value()"},{"location":"999_reference/#src.py_canoe.CANoe.set_measurement_index","text":"sets the measurement index for the next measurement. Parameters: index ( int ) \u2013 index value to set. Returns: int \u2013 Measurement Index value.","title":"set_measurement_index()"},{"location":"999_reference/#src.py_canoe.CANoe.set_replay_block_file","text":"Method for setting CANoe replay block file. Parameters: block_name ( str ) \u2013 CANoe replay block name recording_file_path ( str ) \u2013 CANoe replay recording file including path.","title":"set_replay_block_file()"},{"location":"999_reference/#src.py_canoe.CANoe.set_signal_value","text":"set_signal_value sets a value to Signal. Works only when messages are sent using CANoe IL. Parameters: bus ( str ) \u2013 The Bus(CAN, LIN, FlexRay, MOST, AFDX, Ethernet) on which the signal is sent. channel ( int ) \u2013 The channel on which the signal is sent. message ( str ) \u2013 The name of the message to which the signal belongs. signal ( str ) \u2013 The name of the signal. value ( Union [ float , int ] ) \u2013 signal value. raw_value ( bool , default: False ) \u2013 return raw value of the signal if true. Default(False) is physical value.","title":"set_signal_value()"},{"location":"999_reference/#src.py_canoe.CANoe.set_system_variable_array_values","text":"set_system_variable_array_values sets array of values to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\" value ( tuple ) \u2013 variable values. supported integer array or double array. please always give only one type. index ( int , default: 0 ) \u2013 value of index where values will start updating. Defaults to 0.","title":"set_system_variable_array_values()"},{"location":"999_reference/#src.py_canoe.CANoe.set_system_variable_value","text":"set_system_variable_value sets a value to system variable. Parameters: sys_var_name ( str ) \u2013 The name of the system variable. Ex- \"sys_var_demo::speed\". value ( Union [ int , float , str ] ) \u2013 variable value. supported CAPL system variable data types integer, double, string and data.","title":"set_system_variable_value()"},{"location":"999_reference/#src.py_canoe.CANoe.start_measurement","text":"Starts the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement started. else False.","title":"start_measurement()"},{"location":"999_reference/#src.py_canoe.CANoe.start_measurement_in_animation_mode","text":"Starts the measurement in Animation mode. Parameters: animation_delay ( int , default: 100 ) \u2013 The animation delay during the measurement in Offline Mode.","title":"start_measurement_in_animation_mode()"},{"location":"999_reference/#src.py_canoe.CANoe.step_measurement_event_in_single_step","text":"Processes a measurement event in single step.","title":"step_measurement_event_in_single_step()"},{"location":"999_reference/#src.py_canoe.CANoe.stop_all_test_environments","text":"stops execution of all test environments available in test setup.","title":"stop_all_test_environments()"},{"location":"999_reference/#src.py_canoe.CANoe.stop_all_test_modules_in_test_env","text":"stops execution of all test modules available in test environment. Parameters: env_name ( str ) \u2013 test environment name. avoid duplicate test environment names in CANoe configuration.","title":"stop_all_test_modules_in_test_env()"},{"location":"999_reference/#src.py_canoe.CANoe.stop_ex_measurement","text":"StopEx repairs differences in the behavior of the Stop method on deferred stops concerning simulated and real mode in CANoe. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False.","title":"stop_ex_measurement()"},{"location":"999_reference/#src.py_canoe.CANoe.stop_measurement","text":"Stops the measurement. Parameters: timeout ( int , default: 60 ) \u2013 measurement start/stop event timeout in seconds. Defaults to 60. Returns: bool \u2013 True if measurement stopped. else False.","title":"stop_measurement()"},{"location":"999_reference/#src.py_canoe.CANoe.stop_test_module","text":"stops execution of test module. Parameters: module_name ( str ) \u2013 test module name. avoid duplicate test module names in CANoe configuration.","title":"stop_test_module()"},{"location":"999_reference/#src.py_canoe.CANoe.ui_activate_desktop","text":"Activates the desktop with the given name. Parameters: name ( str ) \u2013 The name of the desktop to be activated.","title":"ui_activate_desktop()"},{"location":"999_reference/#src.py_canoe.CANoe.ui_open_baudrate_dialog","text":"opens the dialog for configuring the bus parameters. Make sure Measurement stopped when using this method.","title":"ui_open_baudrate_dialog()"},{"location":"999_reference/#src.py_canoe.CANoe.write_text_in_write_window","text":"Outputs a line of text in the Write Window. Args: text (str): The text.","title":"write_text_in_write_window()"}]}